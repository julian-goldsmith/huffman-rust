use std::error::Error;
use std::fs::File;
use std::io::prelude::*;
use std::path::Path;
use std::mem;
use std::ptr;

struct Node {
    count: &mut i32,
    val: char,
    left: Option<Box<Node>>,
    right: Option<Box<Node>>,
}

fn get_test_data() -> String {
    let path = Path::new("../testfile.txt");
    let display = path.display();

    let mut file = match File::open(&path) {
        Err(why) => panic!("couldn't open {}: {}", display,
                                                   why.description()),
        Ok(file) => file,
    };

    let mut s = String::new();
    match file.read_to_string(&mut s) {
        Err(why) => panic!("couldn't read {}: {}", display,
                                                   why.description()),
        Ok(_) => s,
    }
}

fn build_freq_list(data: &String) -> [Node; 256] {
    let mut nodes = unsafe {
        let mut nodes: [Node; 256] = mem::uninitialized();

        for (i, ele) in nodes.iter_mut().enumerate() {
            let node = Node { count: 0, val: i as u8 as char, left: None, right: None };
            ptr::write(ele, node)
        }

        nodes
    };

    for c in data.chars() {
        let idx = c as usize;
        let node = nodes[idx];
        node.count = node.count + 1
    }

    nodes
}

fn main() {
    let data = get_test_data();

    //let n = node { count: 0, val: 'a', left: 

    //let n = Node { count: 0, val: 'a', left: &None, right: &None };
    
    let freqs = build_freq_list(&data);

    print!("{}", data)
}
